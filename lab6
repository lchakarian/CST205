#Warmup  
#This program reduces the red eye into whatever color is chosen.
#it locates the actual location of the pixel of where the eye is located and
#the user chooses the color needed to be placed in its place.

def removeRedEye():
  filename = pickAFile()
  pic = makePicture(filename)
  replacementColor = pickAColor()
  oldColor = makeColor(231,109, 129)
  oldColor2 = makeColor(253, 248, 223)
  for x in range(837, 981):
    for y in range(290 ,445):
      pixel = getPixel(pic, x, y)
      color = getColor(pixel)
      if distance(color, oldColor) < 75.0 or distance(color, oldColor2) < 75.0:
        setColor(pixel, replacementColor)
  repaint(pic)
  return(pic)
  
#removes the red eye and makes it whatever color the user chooses
def removeRedEyeMakeBlue():
  filename = pickAFile()
  pic = makePicture(filename)
  replacementColor = pickAColor()
  oldColor = makeColor(231,109, 129)
  oldColor2 = makeColor(253, 248, 223)
  for x in range(837, 981):
    for y in range(290 ,445):
      pixel = getPixel(pic, x, y)
      color = getColor(pixel)
      if distance(color, oldColor) < 75.0 or distance(color, oldColor2) < 75.0:
        setColor(pixel, replacementColor)
  repaint(pic)
  return(pic)

#Problem 1
#makes sepia colored image
def sepia():
  filename = pickAFile()
  pic = makePicture(filename)
  pixels = getPixels(pic)
  for pixel in pixels:
    r = getRed(pixel)
    g = getGreen(pixel)
    b = getBlue(pixel)
    setRed (pixel, r * .393 + g * .769 + b *.189)
    setGreen(pixel, r * .349 + g * .686 + b * .168)
    setBlue(pixel, r * .272 + g * .534 + b * .131)
  repaint(pic)
  
  
#Problem #2
#usese "posertization" of the image
#dividing each color into sets of ranges
#any value that falls in the range, it resets to single value.
def Artify():
  filename = pickAFile()
  pic = makePicture(filename)
  pixels = getPixels(pic)
  for p in pixels:
    r = getRed(p)
    g = getGreen(p)
    b = getBlue(p)
    if r < 64:
      setRed (p, 31)
    elif r < 128:
      setRed (p, 95)      
    elif r < 192:
      setRed (p, 159)
    else:
      setRed (p, 223)
    if g < 64:
      setGreen (p, 31)
    elif g < 128:
      setGreen (p, 95)      
    elif g < 192:
      setGreen (p, 159)
    else:
      setGreen(p, 223)
    if b < 64:
      setBlue (p, 31)
    elif b < 128:
      setBlue (p, 95)      
    elif b < 192:
      setBlue (p, 159)
    else:
      setBlue (p, 223)
  show(pic)
  return pic    
  
#PROBLEM #3
#green screen.  finds the pixels that are the same color as the backdrop(green)
#and replaces with the pixels of the other image background.
def chromakey():
  filename1 = pickAFile()
  pic = makePicture (filename1)
  filename2 = pickAFile()
  bg = makePicture(filename2)
  for x in range (0, getWidth(pic)):
    for y in range (0, getHeight(pic)):
      px = getPixel(pic, x, y)
      color = getColor(px)
      if distance(color, green) < 180.0:
        setColor(px,getColor(getPixel(bg, x, y)))
  show(pic)
  return pic
  
  
  
